name: CI

on:
  push:
    branches: [ main, master ]
  pull_request: {}   # toutes les branches/PR
  workflow_dispatch: {}

# Evite les ex√©cutions concurrentes inutiles
concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: -D warnings

jobs:
  # ‚ö° Feedback rapide : format + clippy (Linux stable)
  lint:
    name: Lint (fmt + clippy)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust (stable)
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2

      - name: rustfmt check
        run: cargo fmt --all -- --check

      - name: clippy (deny warnings)
        run: cargo clippy --all-targets --all-features -- -D warnings

  # üß™ Build & tests multi-OS + variations de features
  test:
    name: Test (${{ matrix.os }} ‚Ä¢ ${{ matrix.toolchain }} ‚Ä¢ f=${{ matrix.features || 'none' }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-14, windows-latest ]
        toolchain: [ stable ]
        features: [ "", "checksum", "compress", "checksum,compress" ]
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust (${{ matrix.toolchain }})
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.toolchain }}

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2

      - name: Compute feature args
        shell: bash
        run: |
          if [ -n "${{ matrix.features }}" ]; then
            echo "FEATURES=--features ${{ matrix.features }}" >> "$GITHUB_ENV"
          else
            echo "FEATURES=" >> "$GITHUB_ENV"
          fi

      - name: Build (release, no default features)
        shell: bash   # fonctionne aussi sous Windows (Git Bash)
        run: cargo build --release --locked --no-default-features $FEATURES

      - name: Test (workspace)
        shell: bash
        run: cargo test --all --locked --no-default-features $FEATURES

  # ‚õìÔ∏è MSRV : aligne avec ton workspace (1.80.0)
  msrv:
    name: MSRV (1.80.0)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust (MSRV)
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: 1.80.0

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2

      - name: Build (no default features)
        run: cargo build --locked --no-default-features

      - name: Test (no default features)
        run: cargo test --locked --no-default-features

  # üßπ V√©rifs suppl√©mentaires (doc + examples) sur Linux
  extras:
    name: Extras (doc, examples)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust (stable)
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2

      - name: Doc build (no-deps, deny warnings)
        env:
          RUSTDOCFLAGS: -D warnings
        run: cargo doc --workspace --all-features --no-deps

      - name: Build examples (non-blocking)
        shell: bash
        run: cargo build --examples || true
