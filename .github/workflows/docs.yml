name: Docs

on:
  push:
    branches: [ main, master ]
  pull_request: {}
  workflow_dispatch: {}

# Ã©vite les runs concurrents inutiles
concurrency:
  group: docs-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  pages: write
  id-token: write

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: -D warnings

jobs:
  rustdoc:
    name: Build rustdoc (stable)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust (stable)
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2

      - name: Build docs (workspace, all-features, no-deps)
        env:
          RUSTDOCFLAGS: -D warnings
        run: |
          cargo doc --workspace --all-features --no-deps
          mkdir -p site/api
          rsync -a --delete target/doc/ site/api/
          # home API minimal (liste dynamique)
          cat > site/api/index.html <<'HTML'
          <!doctype html><meta charset="utf-8">
          <title>API Docs</title>
          <h1>API Docs (workspace)</h1>
          <ul>
          <!--LIST-->
          </ul>
          HTML
          LIST=""
          for d in site/api/* ; do
            [ -d "$d" ] || continue
            b="$(basename "$d")"
            [ -f "$d/index.html" ] || continue
            LIST="${LIST}<li><a href=\"${b}/index.html\">${b}</a></li>"
          done
          perl -0777 -pe "s|<!--LIST-->|$LIST|" -i site/api/index.html

      - name: Upload API artifact
        uses: actions/upload-artifact@v4
        with:
          name: api-docs
          path: site/api
          if-no-files-found: error
          retention-days: 7

  doctests:
    name: Doc-tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust (stable)
        uses: dtolnay/rust-toolchain@stable
      - name: Cache cargo
        uses: Swatinem/rust-cache@v2
      - name: Run doc-tests (workspace, all-features)
        run: cargo test --doc --workspace --all-features

  mdbook:
    name: Build mdBook (if present)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Detect mdBook
        id: has_book
        run: |
          if [ -f docs/book.toml ]; then
            echo "present=true" >> "$GITHUB_OUTPUT"
          else
            echo "present=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Install mdBook
        if: steps.has_book.outputs.present == 'true'
        uses: peaceiris/actions-mdbook@v1

      - name: Build book
        if: steps.has_book.outputs.present == 'true'
        run: |
          mdbook build docs
          mkdir -p site/guide
          rsync -a --delete docs/book/ site/guide/

      - name: Upload Guide artifact
        if: steps.has_book.outputs.present == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: guide-docs
          path: site/guide
          if-no-files-found: warn
          retention-days: 7

  linkcheck:
    name: Link check (Markdown)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Lychee (broken links)
        uses: lycheeverse/lychee-action@v2
        with:
          args: >-
            --no-progress
            --max-concurrency 8
            --timeout 20
            --exclude-private
            **/*.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  assemble:
    name: Assemble site
    needs: [rustdoc, mdbook]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download API artifact
        uses: actions/download-artifact@v4
        with:
          name: api-docs
          path: site/api

      - name: Download Guide artifact (if any)
        uses: actions/download-artifact@v4
        with:
          name: guide-docs
          path: site/guide
        continue-on-error: true

      - name: Ensure site tree & home
        run: |
          mkdir -p site
          touch site/.nojekyll
          cat > site/index.html <<'HTML'
          <!doctype html><meta charset="utf-8">
          <title>Vitte â€” Documentation</title>
          <style>
            body{font-family:system-ui,-apple-system,Segoe UI,Roboto,Ubuntu;max-width:900px;margin:40px auto;padding:0 16px;line-height:1.5}
            h1{letter-spacing:.3px} .cards{display:grid;grid-template-columns:repeat(auto-fit,minmax(240px,1fr));gap:16px}
            .card{border:1px solid #e5e7eb;border-radius:12px;padding:16px;text-decoration:none;color:inherit}
            .card:hover{background:#f9fafb}
          </style>
          <h1>ðŸ“š Vitte â€” Documentation</h1>
          <div class="cards">
            <a class="card" href="guide/"><h3>Guide</h3><p>mdBook : tutoriels, how-to, concepts</p></a>
            <a class="card" href="api/"><h3>API</h3><p>rustdoc : crates du workspace</p></a>
          </div>
          HTML

      - name: Configure Pages
        uses: actions/configure-pages@v5

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: site

  deploy:
    name: Deploy to GitHub Pages
    needs: [assemble, linkcheck, doctests]
    if: github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - id: deployment
        uses: actions/deploy-pages@v4

