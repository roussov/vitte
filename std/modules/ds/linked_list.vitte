//! linked_list — liste chaînée
struct List<T> { __raw: __intrinsics::List }
export fn new<T>() -> List<T> { List{ __raw: __intrinsics::list_new() } }
export fn push_front<T>(mut l: List<T>, v: T) { __intrinsics::list_push_front(l.__raw, v) }
export fn pop_front<T>(mut l: List<T>) -> Option<T> { __intrinsics::list_pop_front(l.__raw) }
