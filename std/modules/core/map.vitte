//! map â€” dictionnaire
struct Map<K,V> { __raw: __intrinsics::Map }

export fn new<K,V>() -> Map<K,V> { Map{ __raw: __intrinsics::map_new() } }
export fn set<K,V>(mut m: Map<K,V>, k: K, v: V) { __intrinsics::map_set(m.__raw, k, v) }
export fn get<K,V>(m: Map<K,V>, k: K) -> Option<V> { __intrinsics::map_get(m.__raw, k) }
export fn has<K,V>(m: Map<K,V>, k: K) -> bool { __intrinsics::map_has(m.__raw, k) }
export fn remove<K,V>(mut m: Map<K,V>, k: K) -> Option<V> { __intrinsics::map_remove(m.__raw, k) }
