//! Option<T> — présence/absence de valeur
enum Option<T> { Some(T), None }

impl<T> Option<T> {
  fn is_some(&self) -> bool { match self { Some(_) => true, None => false } }
  fn is_none(&self) -> bool { !self.is_some() }

  fn map<U>(self, f: fn(T)->U) -> Option<U> {
    match self { Some(v) => Some(f(v)), None => None }
  }

  fn unwrap_or(self, default: T) -> T {
    match self { Some(v) => v, None => default }
  }
}

export fn some<T>(v: T) -> Option<T> { Some(v) }
export fn none<T>() -> Option<T> { None }
