[package]
name        = "vitte-shell"
description = "vitte-shell — exécution de commandes, pipelines, PTY, capture stdout/stderr, env, sync/async (tokio), shlex/which."
version      = { workspace = true }
edition      = { workspace = true }
rust-version = { workspace = true }
license      = { workspace = true }
repository   = { workspace = true }
homepage     = { workspace = true }
readme       = { workspace = true }

keywords   = ["shell", "process", "pty", "tokio", "pipeline"]
categories = ["command-line-interface", "os::unix-apis", "os::windows-apis", "development-tools"]

[lib]
name = "vitte_shell"
path = "src/lib.rs"

[features]
default      = ["std", "errors", "ansi", "path", "spawn", "capture", "env", "shlex"]
std          = []
alloc-only   = []

# Ergonomie
serde   = ["dep:serde"]
errors  = ["dep:thiserror"]
ansi    = ["dep:vitte-ansi"]
path    = ["dep:vitte-path"]
encoding= ["dep:vitte-encoding"]
readline= ["dep:vitte-readline"]

# Exécution
sync    = []                                             # std::process::Command
spawn   = ["dep:tokio", "dep:tokio-util"]                # tokio::process pour async
capture = ["dep:bytes"]                                  # capture binaire
env     = []                                             # gestion d'environnement

# Parsing de ligne de commande
shlex   = ["dep:shlex", "dep:which"]

# Pseudo-terminal (interactive)
pty     = ["dep:portable-pty"]

# Journalisation
log     = ["dep:tracing"]

[dependencies]
# internes
vitte-ansi      = { path = "../vitte-ansi",      version = "0.1.0", optional = true }
vitte-path      = { path = "../vitte-path",      version = "0.1.0", optional = true }
vitte-encoding  = { path = "../vitte-encoding",  version = "0.1.0", optional = true }
vitte-readline  = { path = "../vitte-readline",  version = "0.1.0", optional = true }

# externes
serde       = { workspace = true, optional = true, default-features = false, features = ["derive"] }
thiserror   = { workspace = true, optional = true }

tokio       = { version = "1", optional = true, features = ["macros", "rt-multi-thread", "process", "io-util", "signal"] }
tokio-util  = { version = "0.7", optional = true, features = ["io"] }

portable-pty= { version = "0.8", optional = true }

shlex       = { version = "1.3", optional = true }
which       = { version = "6",   optional = true }

bytes       = { version = "1", optional = true }

tracing     = { version = "0.1", optional = true }

# utilitaires optionnels
terminal_size = { version = "0.3", optional = true }
atty          = { version = "0.2", optional = true }

[dev-dependencies]
pretty_assertions = { workspace = true }
tempfile          = "3"
tokio             = { version = "1", features = ["macros", "rt-multi-thread", "process", "io-util", "signal"] }

[package.metadata.docs.rs]
all-features        = false
features            = [
  "std","errors","ansi","path","encoding","readline",
  "sync","spawn","capture","env","shlex","pty","log"
]
no-default-features = false
rustdoc-args        = ["--cfg", "docsrs"]

[lints.rust]
unsafe_code = "forbid"

[lints.clippy]
all                      = "warn"
pedantic                 = "warn"
nursery                  = "warn"
module_name_repetitions  = "allow"
doc_markdown             = "allow"
too_many_lines           = "allow"