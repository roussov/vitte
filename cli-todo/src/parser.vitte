use utils.cli as cli;
use sys.time as time;

struct Arg { name: String, value: String }

export fn split(argv: Vec<String>) -> (String, Vec<Arg>) {
  if len(argv) == 0 { return ("help", []); }
  let cmd = argv[0];
  let mut args: Vec<Arg> = [];
  let mut i = 1;
  while i < len(argv) {
    let a = argv[i];
    if starts_with(a, "-") {
      // switch with value or boolean
      if i+1 < len(argv) && !starts_with(argv[i+1], "-") {
        push(args, Arg{ name: a, value: argv[i+1] });
        i = i + 2;
      } else {
        push(args, Arg{ name: a, value: "true" });
        i = i + 1;
      }
    } else {
      // positional
      push(args, Arg{ name: "_", value: a });
      i = i + 1;
    }
  }
  return (cmd, args);
}

export fn get(args: Vec<Arg>, key: String) -> Option<String> {
  for a in args { if a.name == key { return Some(a.value); } }
  None
}

export fn get_pos(args: Vec<Arg>, idx: i32) -> Option<String> {
  let mut k = 0;
  for a in args {
    if a.name == "_" {
      if k == idx { return Some(a.value); }
      k = k + 1;
    }
  }
  None
}

export fn flag(args: Vec<Arg>, key: String) -> bool {
  match get(args, key) {
    Some(v) => v == "true" || v == "1",
    None => false,
  }
}
